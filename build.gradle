import java.util.zip.ZipEntry
import java.util.zip.ZipFile
import java.util.zip.ZipInputStream
import java.util.zip.ZipOutputStream

plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
    id 'org.cadixdev.licenser' version '0.6.0'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
    withSourcesJar()
    withJavadocJar()
}

group 'net.covers1624'
archivesBaseName = "Quack"
version '0.4.10'

version = "$version." + (System.getenv("BUILD_NUMBER") ?: "1")
println "Starting build of ${archivesBaseName}, Version: ${version}"

sourceSets {
    create('gradle')
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url 'https://maven.covers1624.net/' }
}

configurations {
    gradleCompileOnly.extendsFrom compileOnly
    gradleImplementation.extendsFrom implementation
}

dependencies {
    implementation 'org.slf4j:slf4j-api:1.7.32'
    implementation 'org.apache.commons:commons-lang3:3.9'
    implementation 'org.apache.httpcomponents:httpclient:4.5.7'
    implementation 'org.apache.httpcomponents:httpmime:4.5.7'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'com.google.guava:guava:26.0-jre'
    implementation 'net.covers1624:TailConsole:1.0.0.1'
    implementation 'com.squareup.okhttp3:okhttp:4.9.1'
    implementation 'org.ow2.asm:asm:9.3'
    implementation 'org.ow2.asm:asm-tree:9.3'
    implementation 'net.covers1624:curl4j:3.0.5'

    compileOnly 'org.jetbrains:annotations:22.0.0'
    compileOnly 'org.apache.logging.log4j:log4j-core:2.11.1'
    annotationProcessor 'org.apache.logging.log4j:log4j-core:2.11.1'

    // Used for testing.
    runtimeOnly 'org.slf4j:slf4j-simple:1.7.32'

    testImplementation 'org.apache.maven:maven-repository-metadata:3.8.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    testRuntimeOnly 'org.slf4j:slf4j-simple:1.7.32'

    gradleCompileOnly gradleApi()
    gradleImplementation sourceSets.main.output
}

test {
    useJUnitPlatform()
}

license {
    header = file("LICENSE-header.txt")
    newLine false

    include 'net/covers1624/quack/**'
    exclude 'net/covers1624/quack/sort/CyclePresentException.java'
    exclude 'net/covers1624/quack/sort/StronglyConnectedComponentDetector.java'
    exclude 'net/covers1624/quack/sort/TopologicalSort.java'
    exclude 'net/covers1624/quack/image/AnimatedGifEncoder.java'
}

jar {
    finalizedBy 'signJar'

    from sourceSets.gradle.output
    manifest {
        attributes 'FMLModType': 'GAMELIBRARY'
        attributes 'Automatic-Module-Name': 'net.covers1624.quack'
    }
    from file("LICENSE.txt")
}

tasks.register('signJar') {
    dependsOn('jar')

    doFirst {
        // Because Gradle is a _very well written piece of software_. We must strip the signatures for the gradle task we ship.
        // This task really should be removed or put into a separate library.
        def filter = [
                "net/covers1624/quack/gradle/"
        ]
        def tempJar = layout.buildDirectory.file("signJar/sign.jar").get().asFile
        tempJar.parentFile.mkdirs()
        def extras = [:] as Map<ZipEntry, byte[]>
        new ZipFile(jar.archiveFile.get().asFile).withCloseable { zf ->
            new ZipOutputStream(tempJar.newOutputStream()).withCloseable { zout ->
                zf.entries().each { ze ->
                    if (ze.isDirectory() || !filter.any { ze.name.startsWith(it) }) {
                        def znew = new ZipEntry(ze.name)
                        znew.time = ze.time
                        zout.putNextEntry(znew)
                        zout.write(zf.getInputStream(ze).bytes)
                    } else {
                        extras[ze] = zf.getInputStream(ze).bytes
                    }
                }
            }
        }
        def args = [:]
        args['jar'] = tempJar
        if (System.getenv("KEY_STORE")) {
            args['keyStore'] = System.getenv("KEY_STORE")
            file(System.getenv("KEY_STORE_PROPS")).withReader {
                def props = new Properties()
                props.load(it)
                args.putAll(props)
            }
        } else if (project.hasProperty('keyStore')) {
            args['keyStore'] = project.getProperty('keyStore')
            args['alias'] = project.getProperty('keyStoreAlias')
            args['storePass'] = project.getProperty('keyStorePass')
            args['keyPass'] = project.getProperty('keyStoreKeyPass')
        } else {
            println "No signing properties."
            state.setOutcome(org.gradle.api.internal.tasks.TaskExecutionOutcome.UP_TO_DATE)
            didWork = false
            return
        }
        project.ant.invokeMethod('signjar', args)
        new ZipFile(tempJar).withCloseable { zf ->
            new ZipOutputStream(jar.archiveFile.get().asFile.newOutputStream()).withCloseable { zout ->
                zf.entries().each { ze ->
                    def znew = new ZipEntry(ze.name)
                    znew.time = ze.time
                    zout.putNextEntry(znew)
                    zout.write(zf.getInputStream(ze).bytes)
                }
                extras.each {
                    def znew = new ZipEntry(it.key.name)
                    znew.time = it.key.time
                    zout.putNextEntry(znew)
                    zout.write(it.value)
                }
            }
        }
    }
}

javadoc {
    options.addBooleanOption("Xdoclint:none", true)
}

publishing {
    repositories {
        if (System.getenv('MAVEN_PASS')) {
            maven {
                url "https://nexus.covers1624.net/repository/maven-releases/"
                credentials {
                    username 'covers1624'
                    password System.getenv('MAVEN_PASS')
                }
            }
        }
    }
    publications {
        Quack(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            //Don't publish a Component, as we don't want to export our dependencies.
            artifact jar
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = archivesBaseName
                description = archivesBaseName
                url = "https://github.com/covers1624/${archivesBaseName}"
                scm {
                    url = "https://github.com/covers1624/${archivesBaseName}"
                    connection = "scm:git:git://github.com/covers1624/${archivesBaseName}.git"
                    connection = "scm:git:git@github.com:covers1624/${archivesBaseName}.git"
                }

                issueManagement {
                    system = 'github'
                    url = "https://github.com/covers1624/${archivesBaseName}/issues"
                }
                licenses {
                    license {
                        name = "MIT"
                        url = "https://raw.githubusercontent.com/covers1624/${archivesBaseName}/master/LICENSE.txt"
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        id = 'covers1624'
                        name = 'covers1624'
                    }
                }
            }
        }
    }
}

signing {
    if (System.getenv('GPG_PRIVATE_KEY')) {
        useInMemoryPgpKeys(
                new File(System.getenv('GPG_PRIVATE_KEY')).text,
                System.getenv('GPG_PRIVATE_KEY_PASS')
        )
    } else if (project.hasProperty('gpgPrivateKey')) {
        useInMemoryPgpKeys(
                new File(project.getProperty('gpgPrivateKey')).text,
                project.getProperty('gpgPrivateKeyPass')
        )
    } else {
        return
    }
    sign publishing.publications.Quack
}
